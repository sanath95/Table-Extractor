from json import load
from pathlib import Path

class ConfigParser:
    """
    Class for parsing the config file.
    """

    def __init__(self, file_path):
        """
        Initialise the config parser and read the config file.

        - file_path (str): Path for the config file.
        """
        
        f = open(file_path)
        self.config = load(f)
        f.close()

    def get_config(self):
        """
        Check and set values for configuration parameters.
        Throws error is image input path is not given.
        Sets default values for optional parameters if not given.

        * returns config (dict): Dictionary containing the configuration settings.
        """
        
        self._set_config()
        self._create_folders()
        return self.config
    
    def _set_config(self):
        config_keys = self.config.keys()

        # Input folder path for images
        if 'input_path' not in config_keys:
            raise KeyError("Input path is required!")

        # Folder path to store all files generated at output
        if 'output_path' not in config_keys:
            self.config['output_path'] = './outputs/pipeline4/'

        # Threshold for table detection
        if 'table_detection_threshold' not in config_keys:
            self.config['table_detection_threshold'] = 0.9

        # Padding to crop detected tables
        if 'padding' not in config_keys:
            self.config['padding'] = 10

        # Max new tokens generated by the llm
        if 'max_new_tokens' not in config_keys:
            self.config['max_new_tokens'] = 1024

        # 8-bit quantization with bitsandbytes. If false, 4-bit quantization will be used.
        if 'load_in_8bit' not in config_keys:
            self.config['load_in_8bit'] = False

        # Content extraction is handled differently if the table contains compound heading
        if 'compound_heading' not in config_keys:
            self.config['compound_heading'] = False

        # File path for the log file
        if 'log_file_path' not in config_keys:
            self.config['log_file_path'] = None

        # Bool - set true to save temp files (cropped table image, box cordinates)
        if 'save_temp_files' not in config_keys:
            self.config['save_temp_files'] = True

        # Folder path to store model cache files
        if 'cache' not in config_keys:
            self.config['cache'] = "./.cache/"
    
    def _create_folders(self):
        Path(self.config['output_path']).mkdir(parents=True, exist_ok=True) # create output directory

        Path(self.config['cache']).mkdir(parents=True, exist_ok=True) # create cache directory

        if self.config['log_file_path']: Path(self.config['log_file_path']).parent.mkdir(parents=True, exist_ok=True) # create log directory